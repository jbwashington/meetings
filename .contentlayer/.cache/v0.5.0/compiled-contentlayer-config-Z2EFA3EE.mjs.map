{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n    ComputedFields,\n    defineDocumentType,\n    makeSource,\n} from \"contentlayer2/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst defaultComputedFields: ComputedFields = {\n    slug: {\n        type: \"string\",\n        resolve: (doc) => `/${doc._raw.flattenedPath}`,\n    },\n    slugAsParams: {\n        type: \"string\",\n        resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n    },\n};\n\nexport const Product = defineDocumentType(() => ({\n    name: \"Product\",\n    filePathPattern: \"products/**/*.mdx\",\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the product\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            description: \"The description of the product\",\n        },\n        price: {\n            type: \"number\",\n            description: \"The price of the product\",\n            required: true,\n        },\n        images: {\n            type: \"list\",\n            of: { type: \"string\" },\n            description: \"The image URLs of the product\",\n        },\n        size: {\n            type: \"enum\",\n            options: [\"XS\", \"S\", \"M\", \"L\", \"XL\", \"XXL\", \"OS\"],\n            description: \"The size of the product\",\n        },\n        color: {\n            type: \"string\",\n            description: \"The color of the product\",\n        },\n        productId: {\n            type: \"string\",\n            description: \"The product ID for usage with Stripe\",\n        },\n        featured: {\n            type: \"boolean\",\n            description: \"Whether the product is featured or not\",\n            default: false,\n        },\n    },\n    computedFields: {\n        ...defaultComputedFields,\n        slug: {\n            type: \"string\",\n            resolve: (doc) => `/products/${doc._raw.flattenedPath}`,\n        },\n    },\n}));\n\nexport const Doc = defineDocumentType(() => ({\n    name: \"Doc\",\n    filePathPattern: `docs/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the doc\",\n            required: true,\n        },\n        description: {\n            description: \"The description of the doc\",\n            type: \"string\",\n        },\n        published: {\n            type: \"boolean\",\n            description: \"Whether the doc is published or not\",\n            default: true,\n        },\n    },\n    computedFields: defaultComputedFields,\n}));\n\nexport const Guide = defineDocumentType(() => ({\n    name: \"Guide\",\n    filePathPattern: `guides/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the guide\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            description: \"The description of the guide\",\n        },\n        date: {\n            type: \"date\",\n            description: \"The date of the guide\",\n            required: true,\n        },\n        published: {\n            type: \"boolean\",\n            description: \"Whether the guide is published or not\",\n            default: true,\n        },\n        featured: {\n            type: \"boolean\",\n            description: \"Whether the guide is featured or not\",\n            default: false,\n        },\n    },\n    computedFields: defaultComputedFields,\n}));\n\nexport const Post = defineDocumentType(() => ({\n    name: \"Post\",\n    filePathPattern: `blog/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of the post\",\n            required: true,\n        },\n        description: {\n            description: \"The description of the post\",\n            type: \"string\",\n        },\n        date: {\n            type: \"date\",\n            description: \"The date of the post\",\n            required: true,\n        },\n        published: {\n            type: \"boolean\",\n            description: \"Whether the post is published or not\",\n            default: true,\n        },\n        image: {\n            type: \"string\",\n            description: \"The image filepath of the post\",\n            required: true,\n        },\n        authors: {\n            // Reference types are not embedded.\n            // Until this is fixed, we can use a simple list.\n            // type: \"reference\",\n            // of: Author,\n            type: \"list\",\n            description: \"The author or authors of the post\",\n            of: { type: \"string\" },\n            required: true,\n        },\n    },\n    computedFields: defaultComputedFields,\n}));\n\nexport const Author = defineDocumentType(() => ({\n    name: \"Author\",\n    filePathPattern: `authors/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The name of the author\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            description: \"The description of the author\",\n        },\n        avatar: {\n            type: \"string\",\n            description: \"The file path of the author avatar\",\n            required: true,\n        },\n        twitter: {\n            type: \"string\",\n            description: \"The twitter handle of the author without the @\",\n            required: true,\n        },\n    },\n    computedFields: defaultComputedFields,\n}));\n\nexport const Page = defineDocumentType(() => ({\n    name: \"Page\",\n    filePathPattern: `pages/**/*.mdx`,\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: \"string\",\n            description: \"The title of page\",\n            required: true,\n        },\n        description: {\n            type: \"string\",\n            description: \"The description of the page\",\n        },\n    },\n    computedFields: defaultComputedFields,\n}));\n\nexport default makeSource({\n    contentDirPath: \"./content\",\n    documentTypes: [Page, Doc, Guide, Post, Author, Product],\n    // disableImportAliasWarning: true,\n    mdx: {\n        remarkPlugins: [remarkGfm],\n        rehypePlugins: [\n            rehypeSlug,\n            [\n                rehypePrettyCode,\n                {\n                    theme: \"github-dark\",\n                    onVisitLine(node: { children: string | any[] }) {\n                        // Prevent lines from collapsing in `display: grid` mode, and allow empty\n                        // lines to be copy/pasted\n                        if (node.children.length === 0) {\n                            node.children = [{ type: \"text\", value: \" \" }];\n                        }\n                    },\n                    onVisitHighlightedLine(node: {\n                        properties: { className: string[] };\n                    }) {\n                        // node.properties.className.push(\"line--highlighted\")\n\n                        // FIX: I changed remark-gmf 4.0.0 to 3.0.1 (return a lot errors in mdx?)\n                        // And solve error on onVisitHighlightedLine with code from : https://stackoverflow.com/questions/76549262/onvisithighlightedline-cannot-push-classname-using-rehype-pretty-code\n                        const nodeClass = node.properties.className;\n\n                        if (nodeClass && nodeClass.length > 0) {\n                            node.properties.className.push(\"line--highlighted\");\n                        } else {\n                            node.properties.className = [\"line--highlighted\"];\n                        }\n                    },\n                    onVisitHighlightedWord(node: {\n                        properties: { className: string[] };\n                    }) {\n                        node.properties.className = [\"word--highlighted\"];\n                    },\n                },\n            ],\n            [\n                rehypeAutolinkHeadings,\n                {\n                    properties: {\n                        className: [\"subheading-anchor\"],\n                        ariaLabel: \"Link to section\",\n                    },\n                },\n            ],\n        ],\n    },\n});\n"],
  "mappings": "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",
  "names": []
}
