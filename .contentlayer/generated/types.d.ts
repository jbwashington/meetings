// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer2/core'
import * as Local from 'contentlayer2/source-files'

export { isType } from 'contentlayer2/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Author = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Author'
  /** The name of the author */
  title: string
  /** The description of the author */
  description?: string | undefined
  /** The file path of the author avatar */
  avatar: string
  /** The twitter handle of the author without the @ */
  twitter: string
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Doc = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Doc'
  /** The title of the doc */
  title: string
  /** The description of the doc */
  description?: string | undefined
  /** Whether the doc is published or not */
  published: boolean
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Guide = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Guide'
  /** The title of the guide */
  title: string
  /** The description of the guide */
  description?: string | undefined
  /** The date of the guide */
  date: IsoDateTimeString
  /** Whether the guide is published or not */
  published: boolean
  /** Whether the guide is featured or not */
  featured: boolean
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Page = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Page'
  /** The title of page */
  title: string
  /** The description of the page */
  description?: string | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  /** The title of the post */
  title: string
  /** The description of the post */
  description?: string | undefined
  /** The date of the post */
  date: IsoDateTimeString
  /** Whether the post is published or not */
  published: boolean
  /** The image filepath of the post */
  image: string
  /** The author or authors of the post */
  authors: string[]
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Product = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Product'
  /** The title of the product */
  title: string
  /** The description of the product */
  description?: string | undefined
  /** The price of the product */
  price: number
  /** The image URLs of the product */
  images?: string[] | undefined
  /** The size of the product */
  size?: 'XS' | 'S' | 'M' | 'L' | 'XL' | 'XXL' | 'OS' | undefined
  /** The color of the product */
  color?: string | undefined
  /** The product ID for usage with Stripe */
  productId?: string | undefined
  /** Whether the product is featured or not */
  featured: boolean
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}  

/** Nested types */
  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Author | Doc | Guide | Page | Post | Product
export type DocumentTypeNames = 'Author' | 'Doc' | 'Guide' | 'Page' | 'Post' | 'Product'

export type NestedTypes = never
export type NestedTypeNames = never

export type DataExports = {
  allDocuments: DocumentTypes[]
  allPages: Page[]
  allDocs: Doc[]
  allGuides: Guide[]
  allPosts: Post[]
  allAuthors: Author[]
  allProducts: Product[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Author: Author
  Doc: Doc
  Guide: Guide
  Page: Page
  Post: Post
  Product: Product
}

export type NestedTypeMap = {

}

 